---
# Role default lower priority variables

# List of dicts with nfs mount points to configure. The structure of the dicts
# is the following:
#
# {
#   src: <host:/path>       # Source of the mount point
#   path: <path>            # Path to the mount point
#   opts: <opt>             # Mount options
#   nfs4: <yes_no>          # Indicate if mount type is NFS4
#   state: <state>          # State of the mount point. Can be absent, mounted,
#                           # present and unmounted. The meaning is the same
#                           # that in ansible mount module
# }
#
# Additionally, if you set to `yes` the variable
# `nfs_client_mounts_create_paths` or `nfs_client_create_src_dir` detailed
# below, you can specify the following attributes for the mount point, that have
# the same meaning that in ansible `file` module:
#
# - owner
# - group
# - mode

nfs_client_mounts: []

# Dicitionary with the default mount point options to use if no other ones are
# specified in the `nfs_client_mounts` variable. The members of the dict are the
# same attributes that the ones expected by `nfs_client_mounts` variable

nfs_client_mounts_defaults: {}

# Create or not mount points paths if they doesn't exist

nfs_client_mounts_create_paths: yes

# Indicate `nfs_client_mounts` must be loaded also from host variables. Any host
# variable that begins with "nfs_client_mounts_*" and contains the necessary
# attributes will be loaded as an item to manage by the role. The variables must
# follow the structure detailed before for `nfs_client_mounts`

nfs_client_load_mounts_from_hostvars: no

# Tell the role to create the source mount point directory within the NFS export
# main directory if it doesn't exists

nfs_client_create_src_dir: no

# Set rpc-statd port to fixed value. Useful in order to restrict network access
# to a set of fixed ports throug a firewall.
#
#nfs_client_rpc_statd_port: 662
